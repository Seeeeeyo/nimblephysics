from __future__ import annotations
import _nimblephysics.biomechanics
import _nimblephysics.common
import _nimblephysics.dynamics
import numpy
__all__ = ['appendMocoTrajectoryAndSaveCSV', 'convertOsimToMJCF', 'convertOsimToSDF', 'filterJustMarkers', 'getScaleAndMarkerOffsets', 'hasArms', 'hasTorso', 'isArmBodyHeuristic', 'isTorsoBodyHeuristic', 'loadGRF', 'loadMocoTrajectory', 'loadMot', 'loadMotAtLowestMarkerRMSERotation', 'loadTRC', 'moveOsimMarkers', 'parseOsim', 'rationalizeJoints', 'replaceOsimInertia', 'replaceOsimMarkers', 'saveIDMot', 'saveMot', 'saveOsimInverseDynamicsProcessedForcesXMLFile', 'saveOsimInverseDynamicsRawForcesXMLFile', 'saveOsimInverseDynamicsXMLFile', 'saveOsimInverseKinematicsXMLFile', 'saveOsimScalingXMLFile', 'saveProcessedGRFMot', 'saveRawGRFMot', 'saveTRC', 'translateOsimMarkers']
def appendMocoTrajectoryAndSaveCSV(inputPath: str, mocoTraj: _nimblephysics.biomechanics.OpenSimMocoTrajectory, outputPath: str) -> None:
    ...
def convertOsimToMJCF(uri: _nimblephysics.common.Uri, outputPath: str, mergeBodiesInto: dict[str, str]) -> bool:
    ...
def convertOsimToSDF(uri: _nimblephysics.common.Uri, outputPath: str, mergeBodiesInto: dict[str, str]) -> bool:
    ...
def filterJustMarkers(inputPath: _nimblephysics.common.Uri, outputPath: str) -> None:
    ...
def getScaleAndMarkerOffsets(standardSkeleton: _nimblephysics.biomechanics.OpenSimFile, scaledSkeleton: _nimblephysics.biomechanics.OpenSimFile) -> _nimblephysics.biomechanics.OpenSimScaleAndMarkerOffsets:
    ...
def hasArms(skel: _nimblephysics.dynamics.Skeleton) -> bool:
    ...
def hasTorso(skel: _nimblephysics.dynamics.Skeleton) -> bool:
    ...
def isArmBodyHeuristic(skel: _nimblephysics.dynamics.Skeleton, bodyName: str) -> bool:
    ...
def isTorsoBodyHeuristic(skel: _nimblephysics.dynamics.Skeleton, bodyName: str) -> bool:
    ...
def loadGRF(path: str, targetTimestamps: list[float] = ...) -> list[_nimblephysics.biomechanics.ForcePlate]:
    ...
def loadMocoTrajectory(path: str) -> _nimblephysics.biomechanics.OpenSimMocoTrajectory:
    ...
def loadMot(skel: _nimblephysics.dynamics.Skeleton, path: str) -> _nimblephysics.biomechanics.OpenSimMot:
    ...
def loadMotAtLowestMarkerRMSERotation(osim: _nimblephysics.biomechanics.OpenSimFile, path: str, c3d: _nimblephysics.biomechanics.C3D) -> _nimblephysics.biomechanics.OpenSimMot:
    ...
def loadTRC(path: str) -> _nimblephysics.biomechanics.OpenSimTRC:
    ...
def moveOsimMarkers(inputPath: _nimblephysics.common.Uri, bodyScales: dict[str, numpy.ndarray[numpy.float64[3, 1]]], markerOffsets: dict[str, tuple[str, numpy.ndarray[numpy.float64[3, 1]]]], outputPath: str) -> None:
    ...
def parseOsim(path: str) -> _nimblephysics.biomechanics.OpenSimFile:
    ...
def rationalizeJoints(inputPath: _nimblephysics.common.Uri, outputPath: str) -> None:
    ...
def replaceOsimInertia(inputPath: _nimblephysics.common.Uri, skel: _nimblephysics.dynamics.Skeleton, outputPath: str) -> None:
    ...
def replaceOsimMarkers(inputPath: _nimblephysics.common.Uri, markers: dict[str, tuple[str, numpy.ndarray[numpy.float64[3, 1]]]], isAnatomical: dict[str, bool], outputPath: str) -> None:
    ...
def saveIDMot(skel: _nimblephysics.dynamics.Skeleton, outputPath: str, timestamps: list[float], forcePlates: numpy.ndarray[numpy.float64[m, n]]) -> None:
    ...
def saveMot(skel: _nimblephysics.dynamics.Skeleton, path: str, timestamps: list[float], poses: numpy.ndarray[numpy.float64[m, n]]) -> None:
    ...
def saveOsimInverseDynamicsProcessedForcesXMLFile(subjectName: str, contactBodies: list[_nimblephysics.dynamics.BodyNode], grfForcePath: str, forcesOutputPath: str) -> None:
    ...
def saveOsimInverseDynamicsRawForcesXMLFile(subjectName: str, skel: _nimblephysics.dynamics.Skeleton, poses: numpy.ndarray[numpy.float64[m, n]], forcePlates: list[_nimblephysics.biomechanics.ForcePlate], grfForcePath: str, forcesOutputPath: str) -> None:
    ...
def saveOsimInverseDynamicsXMLFile(subjectName: str, osimInputModelPath: str, osimInputMotPath: str, osimForcesXmlPath: str, osimOutputStoPath: str, osimOutputBodyForcesStoPath: str, idInstructionsOutputPath: str, startTime: float, endTime: float) -> None:
    ...
def saveOsimInverseKinematicsXMLFile(subjectName: str, markerNames: list[str], osimInputModelPath: str, osimInputTrcPath: str, osimOutputMotPath: str, ikInstructionsOutputPath: str) -> None:
    ...
def saveOsimScalingXMLFile(subjectName: str, skel: _nimblephysics.dynamics.Skeleton, massKg: float, heightM: float, osimInputPath: str, osimInputMarkersPath: str, osimOutputPath: str, scalingInstructionsOutputPath: str) -> None:
    ...
def saveProcessedGRFMot(outputPath: str, timestamps: list[float], bodyNodes: list[_nimblephysics.dynamics.BodyNode], groundLevel: float, wrenches: numpy.ndarray[numpy.float64[m, n]]) -> None:
    ...
def saveRawGRFMot(outputPath: str, timestamps: list[float], forcePlates: list[_nimblephysics.biomechanics.ForcePlate]) -> None:
    ...
def saveTRC(path: str, timestamps: list[float], markerTimestamps: list[dict[str, numpy.ndarray[numpy.float64[3, 1]]]]) -> None:
    ...
def translateOsimMarkers(originalModelPath: _nimblephysics.common.Uri, targetModelPath: _nimblephysics.common.Uri, outputPath: str, verbose: bool = ...) -> tuple[list[str], list[str]]:
    ...
