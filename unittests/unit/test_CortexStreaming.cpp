#include <cstring>
#include <iostream>
#include <memory>
#include <string>
#include <tuple>
#include <utility>

#include <gtest/gtest.h>
#include <unistd.h>

#include "dart/biomechanics/CortexStreaming.hpp"
#include "dart/external/cortex/cortex_intern.h"
#include "dart/math/MathTypes.hpp"

#include "TestHelpers.hpp"

using namespace dart;
using namespace biomechanics;

#define ALL_TESTS

// This is the packet that the client sends to the server
std::vector<unsigned char> helloWorldPacket
    = {0x00, 0x00, 0x84, 0x00, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65,
       0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x04, 0x01, 0x0c, 0x00};

// This is the response packet from the server
std::vector<unsigned char> hereIAmPacket
    = {0x02, 0x00, 0x84, 0x00, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x2e, 0x64,
       0x6c, 0x6c, 0x00, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x79, 0x6e,
       0x61, 0x6d, 0x69, 0x63, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x90, 0xa0, 0x7f,
       0x44, 0xd1, 0x53, 0x01, 0x43, 0x62, 0x12, 0x1e, 0x44, 0x97, 0xa7, 0x81,
       0x44, 0x18, 0xa2, 0x01, 0x43, 0x57, 0x52, 0xfd, 0x43, 0x96, 0xfa, 0x67,
       0x44, 0x78, 0xbb, 0x37, 0x43, 0xbe, 0xdd, 0x42, 0x43, 0xe5, 0x3f, 0x55,
       0x44, 0x6c, 0x45, 0x7d, 0x43, 0xca, 0x56, 0x37, 0x43, 0xee, 0x90, 0x7f,
       0x44, 0xc5, 0x0c, 0x1c, 0x43, 0xe1, 0x4b, 0xb9, 0x42, 0x48, 0x51, 0x86,
       0x44, 0x94, 0x90, 0x50, 0x43, 0xc1, 0xed, 0xef, 0x42, 0x45, 0xc9, 0x03,
       0x44, 0xc9, 0xe7, 0xd6, 0x43, 0x3f, 0x86, 0x0e, 0x44, 0x54, 0x7e, 0xe7,
       0x43, 0x61, 0x71, 0xda, 0x43, 0xa0, 0x32, 0xe9, 0x43, 0x55, 0xe1, 0x66,
       0x01, 0x07, 0x00, 0x02};

// This is the response packet from the server
std::vector<unsigned char> bodyDescriptionPacket
    = {0x0b, 0x00, 0x01, 0x05, 0x02, 0x00, 0x00, 0x00, 0x46, 0x75, 0x6c, 0x6c,
       0x42, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
       0x00, 0x2e, 0x00, 0x00, 0x00, 0x72, 0x5f, 0x6b, 0x6e, 0x65, 0x65, 0x00,
       0x72, 0x5f, 0x73, 0x68, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x6e, 0x74, 0x73,
       0x75, 0x70, 0x00, 0x72, 0x5f, 0x61, 0x6e, 0x6b, 0x6c, 0x65, 0x00, 0x72,
       0x5f, 0x63, 0x61, 0x6c, 0x63, 0x00, 0x72, 0x5f, 0x35, 0x6d, 0x65, 0x74,
       0x61, 0x00, 0x72, 0x5f, 0x74, 0x6f, 0x65, 0x00, 0x4c, 0x5f, 0x6b, 0x6e,
       0x65, 0x65, 0x00, 0x4c, 0x5f, 0x73, 0x68, 0x61, 0x6e, 0x6b, 0x5f, 0x61,
       0x6e, 0x74, 0x73, 0x75, 0x70, 0x00, 0x4c, 0x5f, 0x61, 0x6e, 0x6b, 0x6c,
       0x65, 0x00, 0x4c, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x00, 0x4c, 0x5f, 0x35,
       0x6d, 0x65, 0x74, 0x61, 0x00, 0x4c, 0x5f, 0x74, 0x6f, 0x65, 0x00, 0x72,
       0x5f, 0x73, 0x68, 0x32, 0x00, 0x72, 0x5f, 0x73, 0x68, 0x33, 0x00, 0x72,
       0x5f, 0x73, 0x68, 0x34, 0x00, 0x4c, 0x5f, 0x73, 0x68, 0x32, 0x00, 0x4c,
       0x5f, 0x73, 0x68, 0x33, 0x00, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68,
       0x31, 0x00, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68, 0x32, 0x00, 0x72,
       0x5f, 0x74, 0x68, 0x69, 0x67, 0x68, 0x33, 0x00, 0x72, 0x5f, 0x74, 0x68,
       0x69, 0x67, 0x68, 0x34, 0x00, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68,
       0x35, 0x00, 0x4c, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68, 0x31, 0x00, 0x4c,
       0x5f, 0x74, 0x68, 0x69, 0x67, 0x68, 0x32, 0x00, 0x4c, 0x5f, 0x74, 0x68,
       0x69, 0x67, 0x68, 0x33, 0x00, 0x4c, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68,
       0x34, 0x00, 0x72, 0x2e, 0x41, 0x53, 0x49, 0x53, 0x00, 0x72, 0x2e, 0x50,
       0x53, 0x49, 0x53, 0x00, 0x4c, 0x2e, 0x41, 0x53, 0x49, 0x53, 0x00, 0x4c,
       0x2e, 0x50, 0x53, 0x49, 0x53, 0x00, 0x43, 0x37, 0x00, 0x52, 0x5f, 0x53,
       0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x00, 0x4c, 0x5f, 0x53, 0x68,
       0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x00, 0x53, 0x74, 0x65, 0x72, 0x6e,
       0x75, 0x6d, 0x00, 0x52, 0x5f, 0x68, 0x75, 0x6d, 0x65, 0x72, 0x75, 0x73,
       0x00, 0x52, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x64,
       0x00, 0x52, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x74,
       0x00, 0x52, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x72, 0x6d, 0x00, 0x52,
       0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
       0x73, 0x00, 0x52, 0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6c,
       0x6e, 0x61, 0x00, 0x4c, 0x5f, 0x68, 0x75, 0x6d, 0x65, 0x72, 0x75, 0x73,
       0x00, 0x4c, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x64,
       0x00, 0x4c, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x74,
       0x00, 0x4c, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x72, 0x6d, 0x00, 0x4c,
       0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
       0x73, 0x00, 0x4c, 0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6c,
       0x6e, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
       0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
       0x69, 0x63, 0x00, 0x34, 0x00, 0x00, 0x00, 0x72, 0x5f, 0x6b, 0x6e, 0x65,
       0x65, 0x00, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x6e,
       0x74, 0x73, 0x75, 0x70, 0x00, 0x72, 0x5f, 0x61, 0x6e, 0x6b, 0x6c, 0x65,
       0x00, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x00, 0x72, 0x5f, 0x35, 0x6d,
       0x65, 0x74, 0x61, 0x00, 0x72, 0x5f, 0x74, 0x6f, 0x65, 0x00, 0x4c, 0x5f,
       0x6b, 0x6e, 0x65, 0x65, 0x00, 0x4c, 0x5f, 0x73, 0x68, 0x61, 0x6e, 0x6b,
       0x5f, 0x61, 0x6e, 0x74, 0x73, 0x75, 0x70, 0x00, 0x4c, 0x5f, 0x61, 0x6e,
       0x6b, 0x6c, 0x65, 0x00, 0x4c, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x00, 0x4c,
       0x5f, 0x35, 0x6d, 0x65, 0x74, 0x61, 0x00, 0x4c, 0x5f, 0x74, 0x6f, 0x65,
       0x00, 0x72, 0x5f, 0x6d, 0x6b, 0x6e, 0x65, 0x65, 0x00, 0x72, 0x5f, 0x6d,
       0x61, 0x6e, 0x6b, 0x6c, 0x65, 0x00, 0x4c, 0x5f, 0x6d, 0x6b, 0x6e, 0x65,
       0x65, 0x00, 0x4c, 0x5f, 0x6d, 0x61, 0x6e, 0x6b, 0x6c, 0x65, 0x00, 0x72,
       0x5f, 0x73, 0x68, 0x32, 0x00, 0x72, 0x5f, 0x73, 0x68, 0x33, 0x00, 0x72,
       0x5f, 0x73, 0x68, 0x34, 0x00, 0x4c, 0x5f, 0x73, 0x68, 0x32, 0x00, 0x4c,
       0x5f, 0x73, 0x68, 0x33, 0x00, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68,
       0x31, 0x00, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68, 0x32, 0x00, 0x72,
       0x5f, 0x74, 0x68, 0x69, 0x67, 0x68, 0x33, 0x00, 0x72, 0x5f, 0x74, 0x68,
       0x69, 0x67, 0x68, 0x34, 0x00, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68,
       0x35, 0x00, 0x4c, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68, 0x31, 0x00, 0x4c,
       0x5f, 0x74, 0x68, 0x69, 0x67, 0x68, 0x32, 0x00, 0x4c, 0x5f, 0x74, 0x68,
       0x69, 0x67, 0x68, 0x33, 0x00, 0x4c, 0x5f, 0x74, 0x68, 0x69, 0x67, 0x68,
       0x34, 0x00, 0x72, 0x2e, 0x41, 0x53, 0x49, 0x53, 0x00, 0x72, 0x2e, 0x50,
       0x53, 0x49, 0x53, 0x00, 0x4c, 0x2e, 0x41, 0x53, 0x49, 0x53, 0x00, 0x4c,
       0x2e, 0x50, 0x53, 0x49, 0x53, 0x00, 0x43, 0x37, 0x00, 0x52, 0x5f, 0x53,
       0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x00, 0x4c, 0x5f, 0x53, 0x68,
       0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x00, 0x53, 0x74, 0x65, 0x72, 0x6e,
       0x75, 0x6d, 0x00, 0x52, 0x5f, 0x68, 0x75, 0x6d, 0x65, 0x72, 0x75, 0x73,
       0x00, 0x52, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x64,
       0x00, 0x52, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x74,
       0x00, 0x52, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x72, 0x6d, 0x00, 0x52,
       0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
       0x73, 0x00, 0x52, 0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6c,
       0x6e, 0x61, 0x00, 0x4c, 0x5f, 0x68, 0x75, 0x6d, 0x65, 0x72, 0x75, 0x73,
       0x00, 0x4c, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x64,
       0x00, 0x4c, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x74,
       0x00, 0x4c, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x72, 0x6d, 0x00, 0x4c,
       0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
       0x73, 0x00, 0x4c, 0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6c,
       0x6e, 0x61, 0x00, 0x56, 0x5f, 0x4c, 0x50, 0x53, 0x49, 0x53, 0x32, 0x00,
       0x56, 0x5f, 0x52, 0x68, 0x65, 0x65, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x46, 0x31, 0x58, 0x00,
       0x46, 0x31, 0x59, 0x00, 0x46, 0x31, 0x5a, 0x00, 0x4d, 0x31, 0x58, 0x00,
       0x4d, 0x31, 0x59, 0x00, 0x4d, 0x31, 0x5a, 0x00, 0x46, 0x32, 0x58, 0x00,
       0x46, 0x32, 0x59, 0x00, 0x46, 0x32, 0x5a, 0x00, 0x4d, 0x32, 0x58, 0x00,
       0x4d, 0x32, 0x59, 0x00, 0x4d, 0x32, 0x5a, 0x00, 0x41, 0x44, 0x44, 0x00,
       0x52, 0x46, 0x00, 0x56, 0x4c, 0x00, 0x56, 0x4d, 0x00, 0x54, 0x41, 0x00,
       0x42, 0x46, 0x00, 0x53, 0x54, 0x00, 0x4c, 0x47, 0x00, 0x4d, 0x47, 0x00,
       0x53, 0x4f, 0x4c, 0x00, 0x56, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x00,
       0x42, 0x46, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x00, 0x4d, 0x47, 0x5f, 0x63,
       0x6f, 0x6e, 0x74, 0x00, 0x53, 0x4f, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
       0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0,
       0xc0, 0x00, 0x00, 0xa0, 0xc0, 0x00, 0x00, 0xa0, 0xc0, 0x00, 0x00, 0xa0,
       0xc0, 0x00, 0x00, 0xa0, 0xc0, 0x00, 0x00, 0xa0, 0xc0, 0x00, 0x00, 0xa0,
       0xc0, 0x00, 0x00, 0xa0, 0xc0, 0x00, 0x00, 0xa0, 0xc0, 0x00, 0x00, 0xa0,
       0xc0, 0x00, 0x00, 0xa0, 0xc0, 0x00, 0x00, 0xa0, 0xc0, 0x00, 0x00, 0x20,
       0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x20,
       0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x20,
       0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x20,
       0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x20,
       0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xa0,
       0x40, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xa0,
       0x40, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xa0,
       0x40, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xa0,
       0x40, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20,
       0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20,
       0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20,
       0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20,
       0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20,
       0x40};

// This is the response packet from the server
std::vector<unsigned char> frame1Packet
    = {0x0d, 0x00, 0x7d, 0x0b, 0xca, 0x0c, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
       0x46, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x79, 0x6e,
       0x61, 0x6d, 0x69, 0x63, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x45, 0x5a, 0x80,
       0x44, 0x88, 0x40, 0x02, 0x43, 0x74, 0x6c, 0x0b, 0x44, 0x70, 0xe7, 0x84,
       0x44, 0xa0, 0x85, 0xfc, 0x42, 0xec, 0x6f, 0xdd, 0x43, 0x9c, 0xe1, 0x85,
       0x44, 0x32, 0xed, 0x39, 0x43, 0x9b, 0xbd, 0xd9, 0x42, 0x16, 0x59, 0x7c,
       0x44, 0xc2, 0x26, 0x84, 0x43, 0x24, 0xc5, 0xad, 0x42, 0x4d, 0x5d, 0x94,
       0x44, 0x2c, 0x49, 0x1e, 0x43, 0x89, 0x20, 0xd6, 0x41, 0x06, 0x66, 0x9a,
       0x44, 0x4a, 0x0a, 0x49, 0x43, 0xc1, 0x31, 0x90, 0x42, 0x2d, 0x06, 0x34,
       0x44, 0x43, 0xd1, 0xd9, 0x43, 0x10, 0x8d, 0x02, 0x44, 0x5e, 0x1d, 0x17,
       0x44, 0xf5, 0xf4, 0xda, 0x43, 0x20, 0xdb, 0xf4, 0x43, 0xc6, 0x0b, 0x98,
       0x43, 0xe9, 0x1f, 0xcb, 0x43, 0x85, 0xf0, 0x0b, 0x44, 0xc4, 0xc6, 0x96,
       0x43, 0x46, 0x9c, 0xb1, 0x43, 0x8b, 0x42, 0x1c, 0x44, 0x37, 0xb2, 0x3a,
       0x43, 0x6a, 0x70, 0xcd, 0x43, 0x7a, 0x5f, 0xdc, 0x43, 0x38, 0xc4, 0x45,
       0x43, 0x03, 0x7f, 0xa9, 0x43, 0x3c, 0x07, 0xcb, 0x43, 0xb4, 0x37, 0x86,
       0x44, 0x7f, 0x45, 0x0e, 0x43, 0x9e, 0x7f, 0xa2, 0x43, 0xaa, 0x7d, 0x77,
       0x44, 0x21, 0xb2, 0xec, 0x42, 0x19, 0xfb, 0xd8, 0x43, 0x60, 0xfc, 0x77,
       0x44, 0xd6, 0xc5, 0x14, 0x43, 0xf6, 0xe5, 0xa0, 0x43, 0x2e, 0xb1, 0x19,
       0x44, 0x1e, 0x00, 0xe1, 0x43, 0x7b, 0x07, 0x11, 0x44, 0xc9, 0x68, 0xf6,
       0x43, 0x63, 0x6c, 0xd8, 0x43, 0x9e, 0xdb, 0x11, 0x44, 0xcd, 0x9c, 0x7d,
       0x44, 0x47, 0x72, 0xd6, 0x42, 0x5b, 0xba, 0x45, 0x44, 0xbf, 0xa2, 0x83,
       0x44, 0xc0, 0xee, 0x06, 0x43, 0xef, 0x96, 0x2b, 0x44, 0x45, 0xaf, 0x80,
       0x44, 0x8f, 0x92, 0xe0, 0x42, 0x34, 0x64, 0x1f, 0x44, 0x7f, 0xa5, 0x65,
       0x44, 0x4b, 0xab, 0x96, 0x42, 0xcf, 0xcd, 0x39, 0x44, 0x84, 0x64, 0x70,
       0x44, 0xcf, 0xae, 0xde, 0x42, 0x52, 0x1d, 0x20, 0x44, 0x81, 0xf1, 0x5b,
       0x44, 0xac, 0xd0, 0xd7, 0x43, 0x03, 0x01, 0x2e, 0x44, 0x06, 0x96, 0x4f,
       0x44, 0x8d, 0x71, 0xd0, 0x43, 0xa7, 0x53, 0x0d, 0x44, 0x68, 0xea, 0x41,
       0x44, 0x24, 0xb5, 0xee, 0x43, 0xfe, 0x29, 0x37, 0x44, 0x11, 0x53, 0x36,
       0x44, 0xf3, 0xa9, 0xde, 0x43, 0x0d, 0x09, 0x17, 0x44, 0x0c, 0x90, 0x65,
       0x44, 0xa8, 0xd0, 0x0d, 0x43, 0xd6, 0x74, 0x7d, 0x44, 0xe0, 0xc9, 0x33,
       0x44, 0x08, 0xca, 0x65, 0x43, 0x5e, 0x32, 0x85, 0x44, 0xfc, 0x54, 0x68,
       0x44, 0x0d, 0x6f, 0xca, 0x43, 0x3b, 0x48, 0x7d, 0x44, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x67, 0x0a, 0x50,
       0x44, 0x41, 0xed, 0x88, 0x43, 0x53, 0x22, 0xc2, 0x44, 0x55, 0xec, 0x4d,
       0x44, 0x88, 0x64, 0xae, 0x42, 0xdf, 0x18, 0xbe, 0x44, 0x17, 0x26, 0x65,
       0x44, 0xc6, 0x35, 0xdc, 0x43, 0xf9, 0xe8, 0xbf, 0x44, 0xf6, 0xf9, 0x74,
       0x44, 0x7c, 0x4d, 0x6f, 0x43, 0x30, 0xd3, 0xb5, 0x44, 0xbe, 0xbf, 0x2c,
       0x44, 0x4d, 0x4c, 0xd1, 0x41, 0xbc, 0x41, 0xa8, 0x44, 0xed, 0xe4, 0x0d,
       0x44, 0xb2, 0x52, 0xee, 0x42, 0xb2, 0xea, 0x9f, 0x44, 0x3b, 0x2d, 0x0b,
       0x44, 0x28, 0x44, 0x0a, 0x42, 0x5e, 0xb6, 0xa3, 0x44, 0x37, 0x9c, 0x2a,
       0x44, 0xfa, 0x69, 0x15, 0x41, 0x5f, 0x6c, 0x94, 0x44, 0xb0, 0x35, 0x3e,
       0x44, 0x9a, 0x75, 0x20, 0x41, 0x42, 0xa6, 0x89, 0x44, 0xdf, 0x97, 0x33,
       0x44, 0x52, 0x75, 0xc8, 0xc0, 0xd1, 0x5b, 0x86, 0x44, 0x0e, 0x88, 0x58,
       0x44, 0x32, 0x24, 0x0e, 0x44, 0x76, 0xce, 0xa4, 0x44, 0xf8, 0x1e, 0x37,
       0x44, 0x47, 0xdf, 0x06, 0x44, 0x60, 0xc6, 0x97, 0x44, 0x41, 0xbf, 0x43,
       0x44, 0xc3, 0x62, 0x19, 0x44, 0x16, 0x2d, 0x9d, 0x44, 0x62, 0xce, 0x66,
       0x44, 0xd4, 0x82, 0x07, 0x44, 0x65, 0x06, 0x96, 0x44, 0x54, 0x7f, 0x79,
       0x44, 0x8e, 0xfe, 0xe1, 0x43, 0xa7, 0x06, 0x97, 0x44, 0x8a, 0x12, 0x79,
       0x44, 0xfa, 0xa4, 0xf2, 0x43, 0xe6, 0x14, 0x8f, 0x44, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x64,
       0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x00, 0x34, 0x00, 0x00,
       0x00, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
       0x00, 0x24, 0x7d, 0x1c, 0x44, 0xf4, 0x23, 0xd7, 0x43, 0x9e, 0xe3, 0xef,
       0x43, 0xf4, 0xfe, 0x30, 0x44, 0x82, 0x0a, 0x8c, 0x43, 0x84, 0x65, 0x87,
       0x44, 0x1a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x4e,
       0xff, 0x98, 0xff, 0x4b, 0xff, 0xfb, 0xff, 0xdf, 0xfe, 0x10, 0x01, 0x9f,
       0x00, 0x04, 0x00, 0xe6, 0xff, 0xfa, 0xff, 0x4a, 0xff, 0x74, 0xff, 0x12,
       0xfe, 0x5e, 0xfe, 0x54, 0xfd, 0x6e, 0xf0, 0x5a, 0xfc, 0x07, 0xfe, 0x71,
       0xfe, 0x9f, 0xf5, 0xd2, 0xfd, 0x54, 0xff, 0x40, 0xfe, 0x0a, 0xff, 0x4b,
       0xfc, 0xf7, 0x00, 0x5f, 0xff, 0x98, 0xff, 0x5f, 0xff, 0x04, 0x00, 0x0f,
       0xff, 0x10, 0x01, 0xa1, 0x00, 0x03, 0x00, 0xe5, 0xff, 0xfc, 0xff, 0x4b,
       0xff, 0xb2, 0xff, 0x16, 0xfe, 0xe7, 0xfd, 0xa3, 0xfd, 0xbc, 0xfa, 0x7f,
       0xfd, 0x7e, 0xfe, 0x45, 0xff, 0xc7, 0xf9, 0x42, 0xfe, 0x4a, 0xff, 0x53,
       0xfe, 0x0c, 0xff, 0xb3, 0xfc, 0xd4, 0x00, 0x9d, 0xff, 0x96, 0xff, 0xa5,
       0xff, 0x1e, 0x00, 0x77, 0xff, 0x5d, 0x01, 0x1d, 0x00, 0x32, 0x00, 0x5d,
       0x00, 0x11, 0x00, 0xc2, 0xfe, 0xd8, 0xff, 0x1c, 0xfe, 0xa5, 0xfd, 0x7d,
       0xfd, 0x3d, 0x0b, 0xd7, 0xfe, 0x1b, 0xff, 0xfa, 0xff, 0x5e, 0xfe, 0x95,
       0xfe, 0x3b, 0xff, 0x33, 0xfe, 0xfb, 0xfe, 0xf9, 0xfc, 0xd1, 0x00, 0xb6,
       0xff, 0xa3, 0xff, 0xd1, 0xff, 0x26, 0x00, 0xa9, 0xff, 0x5d, 0x01, 0x1e,
       0x00, 0x2f, 0x00, 0x5b, 0x00, 0x0f, 0x00, 0xc3, 0xfe, 0xdc, 0xff, 0x12,
       0xfe, 0x33, 0xfd, 0x9a, 0xfc, 0x81, 0x1a, 0xc5, 0xff, 0x92, 0xff, 0x56,
       0x00, 0xe7, 0x00, 0xc6, 0xfe, 0x28, 0xff, 0x33, 0xfe, 0xf7, 0xfe, 0x08,
       0xfd, 0xbb, 0x00, 0x15, 0x00, 0xda, 0xff, 0x76, 0x00, 0x38, 0x00, 0x1a,
       0x00, 0xb5, 0x01, 0xb3, 0xff, 0x5c, 0x00, 0xc5, 0x00, 0x40, 0x00, 0x05,
       0xfe, 0xd2, 0xff, 0x0f, 0xfe, 0xe4, 0xfc, 0x2e, 0xfb, 0x4d, 0x20, 0x37,
       0x00, 0xc7, 0xff, 0x06, 0x00, 0xab, 0x00, 0xdd, 0xfe, 0x23, 0xff, 0x31,
       0xfe, 0x01, 0xff, 0x0e, 0xfd, 0xbe, 0x00, 0x37, 0x00, 0xfe, 0xff, 0xbc,
       0x00, 0x37, 0x00, 0x44, 0x00, 0xb4, 0x01, 0xb5, 0xff, 0x5a, 0x00, 0xc3,
       0x00, 0x3f, 0x00, 0x08, 0xfe, 0xc5, 0xff, 0x0b, 0xfe, 0x49, 0xfc, 0xd8,
       0xf9, 0x16, 0x19, 0xc9, 0x00, 0x34, 0x00, 0x78, 0xff, 0x3d, 0xff, 0xcc,
       0xfe, 0x1f, 0xff, 0x3e, 0xfe, 0x19, 0xff, 0x06, 0xfd, 0xc5, 0x00, 0xbb,
       0x00, 0x71, 0x00, 0xb9, 0x01, 0x32, 0x00, 0x9c, 0x00, 0xf0, 0x01, 0x84,
       0xff, 0x76, 0x00, 0x0d, 0x01, 0x72, 0x00, 0x3c, 0xfd, 0xd2, 0xff, 0x22,
       0xfe, 0x2f, 0xfc, 0x75, 0xf9, 0x09, 0x0a, 0xa8, 0x01, 0x3a, 0x01, 0x4e,
       0xff, 0xb5, 0xfe, 0x99, 0xfe, 0x28, 0xff, 0x5e, 0xfe, 0x34, 0xff, 0xfb,
       0xfc, 0xc5, 0x00, 0xee, 0x00, 0xa9, 0x00, 0xfa, 0x01, 0x1a, 0x00, 0xc3,
       0x00, 0xf0, 0x01, 0x85, 0xff, 0x74, 0x00, 0x0c, 0x01, 0x72, 0x00, 0x3e,
       0xfd, 0xcd, 0xff, 0x22, 0xfe, 0x03, 0xfc, 0x16, 0xfa, 0x62, 0xfe, 0x21,
       0x02, 0xab, 0x02, 0x7b, 0xff, 0x76, 0xff, 0x6b, 0xfe, 0x3b, 0xff, 0xad,
       0xfe, 0x50, 0xff, 0xf1, 0xfc, 0xc5, 0x00, 0xbd, 0x01, 0x59, 0x01, 0xf0,
       0x02, 0xd8, 0xff, 0x15, 0x01, 0x00, 0x02, 0xa7, 0xff, 0x64, 0x00, 0xff,
       0x00, 0x72, 0x00, 0xb2, 0xfc, 0xb8, 0xff, 0x1c, 0xfe, 0x5e, 0xfc, 0x02,
       0xfb, 0xb8, 0xfb, 0xcc, 0x01, 0xac, 0x03, 0x9d, 0xff, 0x21, 0x00, 0x58,
       0xfe, 0x3d, 0xff, 0xb9, 0xfe, 0x63, 0xff, 0x0a, 0xfd, 0xc3, 0x00, 0x06,
       0x02, 0x99, 0x01, 0x34, 0x03, 0xb0, 0xff, 0x3e, 0x01, 0x01, 0x02, 0xa4,
       0xff, 0x63, 0x00, 0xff, 0x00, 0x72, 0x00, 0xb4, 0xfc, 0x74, 0xff, 0xf0,
       0xfd, 0xf5, 0xfc, 0x3f, 0xfb, 0x7e, 0xfa, 0xfa, 0x00, 0x0d, 0x03, 0x63,
       0xff, 0xa5, 0xff, 0x0f, 0xfe, 0xfb, 0xfe, 0x99, 0xfe, 0x56, 0xff, 0x00,
       0xfd, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xa7, 0x25, 0x51,
       0x3f, 0xc6, 0x65, 0x4a, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xd9,
       0x41, 0x00, 0xcf, 0x19, 0xc2, 0x00, 0xe8, 0xfd, 0xc1, 0xeb, 0xbf, 0xd2,
       0x40, 0x9e, 0xef, 0x67, 0x3f, 0xcd, 0xcc, 0x4c, 0x3e, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
       0x80, 0x00, 0x00, 0x00, 0x80, 0x95, 0x7a, 0xe9, 0x3f, 0xb8, 0x30, 0xef,
       0x3e, 0x00, 0x00, 0x00, 0x00, 0x50, 0xce, 0x90, 0xc2, 0x00, 0xcf, 0x19,
       0xc2, 0x00, 0x49, 0x59, 0xc2, 0x08, 0xc9, 0xf4, 0xc0, 0xde, 0x80, 0x42,
       0x3f, 0x12, 0xf9, 0x5b, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x80, 0x88, 0xc4,
       0x41, 0xc0, 0xc1, 0x16, 0xc2, 0x00, 0xe8, 0xfd, 0xc1, 0xb4, 0x23, 0xd5,
       0x40, 0x9e, 0xef, 0x67, 0x3f, 0xcd, 0xcc, 0x4c, 0x3e, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
       0x80, 0x00, 0x00, 0x00, 0x80, 0x93, 0xf0, 0xe8, 0x3f, 0x17, 0x96, 0xfd,
       0x3e, 0x00, 0x00, 0x00, 0x00, 0x50, 0xce, 0x90, 0xc2, 0xc0, 0xc1, 0x16,
       0xc2, 0x80, 0x88, 0x44, 0xc2, 0x3d, 0x70, 0x17, 0xc1, 0xca, 0x03, 0x0e,
       0x3f, 0x01, 0x74, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb3, 0x71,
       0x41, 0x00, 0x65, 0x01, 0xc2, 0x00, 0x65, 0x01, 0xc2, 0x6f, 0x8f, 0x3a,
       0x40, 0x4f, 0xb4, 0x83, 0x3f, 0x66, 0x83, 0x84, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x40, 0x03, 0x55, 0x42, 0x00, 0x9a, 0x8d, 0xc0, 0x00, 0x24, 0x74,
       0x41, 0xef, 0x82, 0xb9, 0x41, 0x01, 0x58, 0xe6, 0x3f, 0xa8, 0x30, 0x30,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xd0, 0xef, 0x80, 0xc2, 0x00, 0x65, 0x01,
       0xc2, 0x00, 0xb3, 0xf1, 0xc1, 0x5e, 0xa7, 0xa0, 0xc1, 0xed, 0x00, 0xe6,
       0x3e, 0x57, 0xb1, 0x93, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x34,
       0x41, 0x80, 0x20, 0xff, 0xc1, 0x00, 0x0d, 0xe3, 0xc1, 0x0c, 0x3c, 0xe3,
       0x3f, 0x21, 0x13, 0x83, 0x3f, 0xd8, 0xe0, 0x88, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x40, 0x03, 0x55, 0x42, 0x00, 0x7c, 0x92, 0xc0, 0x00, 0x7e, 0x65,
       0x41, 0x15, 0x8f, 0xc8, 0x41, 0xda, 0xce, 0xdb, 0x3f, 0xc0, 0x25, 0x46,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x82, 0x6c, 0xc2, 0x80, 0x20, 0xff,
       0xc1, 0x00, 0xaa, 0xb4, 0xc1, 0x00, 0x07, 0xc6, 0xc1, 0x81, 0x42, 0x21,
       0xbf, 0x98, 0x6e, 0x02, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x4d,
       0xc0, 0x80, 0x45, 0xe4, 0xc1, 0x00, 0x8c, 0x39, 0xc1, 0xdb, 0xaf, 0xd2,
       0xc1, 0x4b, 0x81, 0x90, 0x3f, 0xb2, 0x42, 0x95, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0xa0, 0x5c, 0x85, 0x42, 0x00, 0xfd, 0x3b, 0x41, 0x00, 0x9c, 0xe0,
       0x41, 0x3b, 0xe7, 0xd7, 0x41, 0x8d, 0x1d, 0x49, 0x40, 0x94, 0x18, 0x24,
       0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x67, 0xc2, 0x80, 0x45, 0xe4,
       0xc1, 0x00, 0x14, 0xcd, 0x40, 0x17, 0x52, 0xc6, 0x42, 0x9a, 0x99, 0x99,
       0x3e, 0xcd, 0xcc, 0x4c, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
       0x80, 0x51, 0xb5, 0x90, 0x3f, 0x52, 0xb8, 0x96, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x80, 0x0e, 0x85, 0x42, 0x00, 0x1b, 0x37, 0x41, 0x00, 0xba, 0xdb,
       0x41, 0xe0, 0xd6, 0xde, 0x41, 0x5c, 0x04, 0x21, 0x40, 0x69, 0x6e, 0x31,
       0x3e, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1a, 0x66, 0xc2, 0x00, 0xef, 0xe7,
       0xc1, 0x00, 0x47, 0x86, 0x41, 0x4a, 0xca, 0x09, 0x42, 0x61, 0xa0, 0xbb,
       0x3f, 0x5d, 0xa6, 0xd9, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x80, 0x45, 0xe4,
       0xc1, 0x80, 0x7a, 0xf0, 0xc1, 0x80, 0xf0, 0x09, 0x42, 0xcf, 0x70, 0x33,
       0x42, 0x2f, 0xae, 0x9a, 0x3f, 0xe0, 0x4f, 0x9d, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x5e, 0x97, 0x42, 0x00, 0x5e, 0x97, 0x41, 0x00, 0x0b, 0x10,
       0x42, 0xec, 0x54, 0xbc, 0x41, 0x8b, 0x97, 0x0d, 0x40, 0xee, 0x01, 0xf0,
       0x3e, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8b, 0x68, 0xc2, 0x80, 0x7a, 0xf0,
       0xc1, 0x80, 0x45, 0x64, 0x42, 0xa0, 0x43, 0x0e, 0x41, 0xfe, 0xd4, 0x98,
       0x3f, 0x1b, 0xb6, 0x29, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x80, 0x43, 0x11,
       0xc2, 0x80, 0x7a, 0xf0, 0xc1, 0x80, 0x4c, 0x4e, 0x42, 0x57, 0x2d, 0x14,
       0x42, 0x0e, 0x59, 0x9b, 0x3f, 0x42, 0x15, 0x9f, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x5e, 0x97, 0x42, 0x80, 0x25, 0x96, 0x41, 0x00, 0x9a, 0x0d,
       0x42, 0xdd, 0x64, 0xc5, 0x41, 0x5e, 0x36, 0x09, 0x40, 0xb1, 0x5d, 0x04,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xe6, 0x6b, 0xc2, 0x80, 0x7a, 0xf0,
       0xc1, 0x80, 0x43, 0x91, 0x42, 0x88, 0x3c, 0x07, 0x40, 0x0d, 0x36, 0x73,
       0x3f, 0x71, 0xca, 0x62, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xcd, 0x87,
       0xc2, 0x80, 0x7a, 0xf0, 0xc1, 0x40, 0x92, 0xd2, 0x42, 0xa1, 0x18, 0xf6,
       0x41, 0xc8, 0xb5, 0xa1, 0x3f, 0x5f, 0xd2, 0xac, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x40, 0x9c, 0x42, 0x00, 0x49, 0x59, 0x41, 0x00, 0x24, 0xf4,
       0x41, 0x5d, 0x4f, 0xd7, 0x41, 0x1e, 0xfb, 0x00, 0x40, 0x20, 0x2c, 0x0c,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf3, 0x6e, 0xc2, 0x80, 0x7a, 0xf0,
       0xc1, 0xa0, 0xcd, 0x07, 0x43, 0x79, 0x93, 0x05, 0xc1, 0x89, 0xcd, 0x65,
       0x3f, 0xe0, 0x64, 0x73, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x14, 0x9e,
       0xc2, 0x80, 0x09, 0xee, 0xc1, 0x40, 0xa2, 0xf9, 0x42, 0xe0, 0xe3, 0xea,
       0x41, 0x0f, 0x2d, 0xa2, 0x3f, 0x0c, 0x52, 0xae, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x20, 0x8e, 0x9c, 0x42, 0x00, 0x9c, 0x60, 0x41, 0x00, 0xb3, 0xf1,
       0x41, 0x74, 0x6d, 0xdf, 0x41, 0x2a, 0xea, 0xfd, 0x3f, 0xb6, 0xde, 0x0d,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x52, 0x67, 0xc2, 0x80, 0x09, 0xee,
       0xc1, 0xc0, 0x14, 0x1e, 0x43, 0xed, 0x90, 0x3e, 0xc1, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
       0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x11, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00};

std::vector<unsigned char> frame2Packet
    = {0x0d, 0x00, 0x65, 0x0b, 0xe4, 0x0d, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
       0x46, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x79, 0x6e,
       0x61, 0x6d, 0x69, 0x63, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x91, 0xf9, 0x6f,
       0x44, 0x4e, 0x4a, 0x22, 0x43, 0xb7, 0xd2, 0x00, 0x44, 0xfc, 0xee, 0x73,
       0x44, 0x3f, 0xab, 0x2d, 0x43, 0xaa, 0xca, 0xc6, 0x43, 0x4c, 0x78, 0x55,
       0x44, 0xbb, 0x47, 0x6b, 0x43, 0x20, 0xec, 0xcb, 0x42, 0x53, 0x17, 0x43,
       0x44, 0x46, 0x84, 0x99, 0x43, 0x3d, 0x3d, 0x8e, 0x42, 0x4d, 0x49, 0x6e,
       0x44, 0x1d, 0xdb, 0x3d, 0x43, 0x79, 0xf2, 0x06, 0x42, 0x4a, 0xba, 0x7b,
       0x44, 0xc1, 0x89, 0x76, 0x43, 0xe8, 0x8d, 0x49, 0x42, 0x75, 0x61, 0x38,
       0x44, 0x14, 0xcd, 0xe8, 0x43, 0x56, 0x4f, 0xeb, 0x43, 0x98, 0x77, 0x1c,
       0x44, 0x16, 0xd4, 0xe5, 0x43, 0x75, 0xba, 0xe7, 0x43, 0x31, 0x33, 0xb1,
       0x43, 0x10, 0xa8, 0xcd, 0x43, 0x54, 0xa1, 0x16, 0x44, 0x70, 0xd0, 0xb4,
       0x43, 0x2c, 0xb1, 0xb4, 0x43, 0xac, 0xa0, 0x26, 0x44, 0x95, 0x0c, 0x60,
       0x43, 0x66, 0xd7, 0xd0, 0x43, 0xca, 0xf9, 0xf9, 0x43, 0x78, 0x0f, 0x67,
       0x43, 0x56, 0x00, 0xad, 0x43, 0x39, 0xc3, 0xe7, 0x43, 0xd6, 0xab, 0x6c,
       0x44, 0x95, 0x7b, 0x3f, 0x43, 0xc2, 0x48, 0x8d, 0x43, 0x76, 0x85, 0x62,
       0x44, 0x39, 0x37, 0x15, 0x43, 0xa4, 0x6d, 0xcc, 0x43, 0x5a, 0xf3, 0x58,
       0x44, 0x71, 0x7c, 0x32, 0x43, 0x7b, 0xf0, 0x97, 0x43, 0x9a, 0xd7, 0x23,
       0x44, 0xa7, 0xa0, 0xec, 0x43, 0xed, 0x30, 0x09, 0x44, 0xf4, 0x06, 0x07,
       0x44, 0x90, 0x84, 0xe1, 0x43, 0xd4, 0x14, 0x11, 0x44, 0xa7, 0x55, 0x6e,
       0x44, 0x1e, 0x56, 0xe8, 0x42, 0x45, 0xf5, 0x3a, 0x44, 0x94, 0x8c, 0x76,
       0x44, 0x0c, 0x6f, 0x14, 0x43, 0x45, 0x80, 0x20, 0x44, 0xb5, 0xfc, 0x6e,
       0x44, 0xb9, 0x19, 0x08, 0x43, 0x0a, 0xac, 0x14, 0x44, 0x4f, 0x48, 0x54,
       0x44, 0x99, 0xf1, 0xc6, 0x42, 0xa3, 0xe1, 0x2f, 0x44, 0xe0, 0x89, 0x5e,
       0x44, 0xab, 0xc1, 0x0b, 0x43, 0xa8, 0x4b, 0x16, 0x44, 0x67, 0x59, 0x56,
       0x44, 0x28, 0x1d, 0xe6, 0x43, 0xb9, 0x43, 0x25, 0x44, 0x76, 0x9e, 0x50,
       0x44, 0xe4, 0x5d, 0xe2, 0x43, 0x25, 0xbd, 0x02, 0x44, 0x47, 0xab, 0x3a,
       0x44, 0xe7, 0x61, 0xf8, 0x43, 0xc3, 0x99, 0x2a, 0x44, 0x43, 0x8e, 0x35,
       0x44, 0x55, 0x33, 0xe9, 0x43, 0xb8, 0xde, 0x08, 0x44, 0x6a, 0x21, 0x57,
       0x44, 0x21, 0x79, 0x1c, 0x43, 0x32, 0xee, 0x73, 0x44, 0x42, 0x29, 0x24,
       0x44, 0x52, 0x08, 0x6d, 0x43, 0x39, 0x75, 0x80, 0x44, 0xf4, 0x8c, 0x57,
       0x44, 0xb6, 0xb5, 0xd1, 0x43, 0x5a, 0xc2, 0x71, 0x44, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x68, 0x4d, 0x45,
       0x44, 0xf2, 0xf0, 0x8a, 0x43, 0xbc, 0xa7, 0xbc, 0x44, 0xdb, 0x6c, 0x47,
       0x44, 0xb1, 0x0a, 0xa4, 0x42, 0xd1, 0xb4, 0xb7, 0x44, 0xb5, 0x5a, 0x57,
       0x44, 0xc0, 0x76, 0xe4, 0x43, 0x48, 0xba, 0xb9, 0x44, 0xd1, 0xe9, 0x6a,
       0x44, 0xba, 0x3e, 0x80, 0x43, 0xd2, 0x29, 0xaf, 0x44, 0x5e, 0xde, 0x2c,
       0x44, 0x5a, 0x27, 0x37, 0x41, 0xb7, 0x23, 0x9e, 0x44, 0x5a, 0x74, 0x0e,
       0x44, 0x77, 0x47, 0xa5, 0x42, 0x59, 0xa2, 0x93, 0x44, 0xe8, 0x44, 0x0d,
       0x44, 0x37, 0xd5, 0xdb, 0xbf, 0x42, 0xa8, 0x97, 0x44, 0xa9, 0xe0, 0x31,
       0x44, 0x7f, 0x31, 0x41, 0xc1, 0xd8, 0xe5, 0x8a, 0x44, 0xae, 0x2e, 0x48,
       0x44, 0x65, 0x6b, 0xee, 0xbe, 0xfa, 0x1d, 0x82, 0x44, 0x00, 0x7d, 0x3f,
       0x44, 0x7b, 0xfa, 0xbe, 0xc1, 0x88, 0x29, 0x7c, 0x44, 0x0d, 0xd7, 0x40,
       0x44, 0x14, 0xb0, 0x0b, 0x44, 0x9b, 0x2a, 0x9e, 0x44, 0x11, 0x00, 0x20,
       0x44, 0xdf, 0xa3, 0x02, 0x44, 0x6d, 0xc3, 0x93, 0x44, 0xa7, 0x49, 0x2b,
       0x44, 0xf7, 0xab, 0x16, 0x44, 0xaa, 0x3f, 0x98, 0x44, 0xf2, 0x59, 0x4d,
       0x44, 0xc8, 0x69, 0x0a, 0x44, 0x80, 0x45, 0x8d, 0x44, 0x8e, 0xe2, 0x62,
       0x44, 0xa5, 0x66, 0xed, 0x43, 0x69, 0xc6, 0x8b, 0x44, 0x66, 0x46, 0x5e,
       0x44, 0x39, 0x96, 0xff, 0x43, 0xab, 0x3f, 0x84, 0x44, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x64,
       0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x00, 0x34, 0x00, 0x00,
       0x00, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18, 0x4b, 0x7f, 0x96, 0x18,
       0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x1a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x07, 0x3b,
       0x18, 0x4f, 0x28, 0xee, 0x30, 0x6b, 0xe7, 0xaa, 0xfe, 0xf4, 0xfc, 0xb6,
       0xfb, 0x2d, 0xff, 0x2c, 0xfe, 0x54, 0xff, 0xc0, 0x05, 0xa0, 0xfe, 0x22,
       0xfe, 0x58, 0x04, 0x25, 0x04, 0x7a, 0xf8, 0x70, 0xff, 0x39, 0xfd, 0x6b,
       0x06, 0x4e, 0xf4, 0x0d, 0xfe, 0x0a, 0xff, 0x22, 0xfe, 0xe9, 0xfd, 0x67,
       0xfc, 0x30, 0x07, 0x71, 0x18, 0x51, 0x28, 0xf2, 0x30, 0x76, 0xe7, 0x50,
       0xfe, 0xf1, 0xfc, 0xb1, 0xfb, 0x2d, 0xff, 0x2b, 0xfe, 0x54, 0xff, 0xc2,
       0x05, 0xb9, 0xfe, 0x27, 0xfe, 0x28, 0x00, 0x31, 0x05, 0x01, 0x04, 0x74,
       0xff, 0xcb, 0xfd, 0x32, 0x0b, 0xfd, 0xf7, 0xe4, 0xfe, 0x06, 0xff, 0x53,
       0xfe, 0xd8, 0xfd, 0xa6, 0xfc, 0x10, 0x08, 0x5f, 0x19, 0x52, 0x28, 0x01,
       0x31, 0x9a, 0xe7, 0x8d, 0xfd, 0xb7, 0xfd, 0xfd, 0xfd, 0xe3, 0xfe, 0xf2,
       0xfd, 0x2e, 0xff, 0x15, 0x05, 0xdb, 0xfe, 0x3e, 0xfe, 0xc5, 0xfb, 0x22,
       0x05, 0x39, 0x0b, 0xa3, 0xff, 0x38, 0xfe, 0x63, 0x0d, 0x0c, 0xfd, 0x5d,
       0xff, 0x1b, 0xff, 0x6b, 0xfe, 0xe7, 0xfd, 0xea, 0xfc, 0x4a, 0x08, 0x79,
       0x19, 0x59, 0x28, 0x0a, 0x31, 0xb5, 0xe7, 0xd6, 0xfc, 0xb4, 0xfd, 0xf6,
       0xfd, 0xe5, 0xfe, 0xf2, 0xfd, 0x2e, 0xff, 0x16, 0x05, 0xe8, 0xfe, 0x40,
       0xfe, 0xf6, 0xf7, 0x56, 0x04, 0x5a, 0x08, 0x81, 0xff, 0xe3, 0xfd, 0x91,
       0x0c, 0xb0, 0x03, 0x63, 0xff, 0x2a, 0xff, 0x62, 0xfe, 0x25, 0xfe, 0x61,
       0xfd, 0x9e, 0x09, 0xed, 0x19, 0x67, 0x28, 0x27, 0x31, 0x00, 0xe8, 0x47,
       0xfb, 0x80, 0xfe, 0x91, 0x00, 0x8b, 0xfe, 0xc8, 0xfd, 0x04, 0xff, 0xff,
       0x03, 0xd5, 0xfe, 0x38, 0xfe, 0x86, 0xf5, 0x48, 0x03, 0x6e, 0x00, 0x50,
       0xff, 0xb5, 0xfc, 0x21, 0x0a, 0x2f, 0x0a, 0x1d, 0xff, 0x3b, 0xff, 0x6d,
       0xfe, 0x69, 0xfe, 0xd2, 0xfd, 0xc5, 0x09, 0xe5, 0x19, 0x6a, 0x28, 0x20,
       0x31, 0x11, 0xe8, 0xa1, 0xfa, 0x7f, 0xfe, 0x88, 0x00, 0x8d, 0xfe, 0xc9,
       0xfd, 0x06, 0xff, 0x04, 0x04, 0xbb, 0xfe, 0x22, 0xfe, 0xb8, 0xf4, 0x0e,
       0x02, 0x14, 0xfc, 0x45, 0xff, 0x59, 0xfb, 0xf8, 0x07, 0x71, 0x0e, 0xf3,
       0xfe, 0x48, 0xff, 0x71, 0xfe, 0x77, 0xfe, 0xf4, 0xfd, 0xae, 0x0a, 0xc5,
       0x19, 0x74, 0x28, 0x04, 0x31, 0x42, 0xe8, 0x2a, 0xf9, 0x51, 0xff, 0x0f,
       0x03, 0x42, 0xfe, 0xdb, 0xfd, 0xdf, 0xfe, 0x9c, 0x02, 0xc6, 0xfe, 0xe1,
       0xfd, 0x51, 0xf5, 0x78, 0x00, 0xfd, 0xfc, 0x37, 0xff, 0x9e, 0xfa, 0x7c,
       0x06, 0xfd, 0x0e, 0x59, 0xff, 0x50, 0xff, 0x71, 0xfe, 0x7e, 0xfe, 0xd4,
       0xfd, 0x9d, 0x0a, 0xa1, 0x19, 0x83, 0x28, 0x09, 0x31, 0x1f, 0xe8, 0x0c,
       0xf9, 0x4f, 0xff, 0x06, 0x03, 0x43, 0xfe, 0xdb, 0xfd, 0xdf, 0xfe, 0xa2,
       0x02, 0xe4, 0xfe, 0x79, 0xfd, 0xa3, 0xf6, 0x95, 0xfe, 0x4e, 0xff, 0x2c,
       0xff, 0xde, 0xfa, 0x0b, 0x05, 0x4e, 0x0b, 0x28, 0x00, 0x65, 0xff, 0x82,
       0xfe, 0x86, 0xfe, 0xc7, 0xfd, 0x4b, 0x0a, 0x07, 0x19, 0xb2, 0x28, 0x15,
       0x31, 0xc5, 0xe7, 0xc4, 0xf8, 0x13, 0x00, 0x2e, 0x05, 0x35, 0xfe, 0x30,
       0xfe, 0xc8, 0xfe, 0x4b, 0x01, 0xec, 0xfe, 0x2e, 0xfd, 0x85, 0xf8, 0x28,
       0xfd, 0xfa, 0x00, 0x34, 0xff, 0xda, 0xfb, 0x85, 0x02, 0x11, 0x05, 0xbc,
       0x00, 0x74, 0xff, 0x9c, 0xfe, 0xad, 0xfe, 0xf0, 0xfd, 0x0b, 0x0a, 0xd0,
       0x18, 0xe6, 0x28, 0x4d, 0x31, 0x6d, 0xe7, 0x55, 0xf9, 0x10, 0x00, 0x26,
       0x05, 0x35, 0xfe, 0x30, 0xfe, 0xc8, 0xfe, 0x4f, 0x01, 0xc0, 0xfe, 0x11,
       0xfd, 0xcb, 0xfa, 0xb9, 0xfc, 0xab, 0x02, 0x1b, 0xff, 0x24, 0xfd, 0x7a,
       0xfe, 0x34, 0x00, 0x5b, 0x00, 0x50, 0xff, 0x86, 0xfe, 0xb1, 0xfe, 0xfe,
       0xfd, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x6a, 0x90, 0x29,
       0x3f, 0x84, 0x94, 0xa4, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xa0, 0x6c,
       0xc4, 0xc8, 0x67, 0x89, 0xc3, 0xbe, 0xd1, 0x44, 0x45, 0x90, 0x30, 0xf8,
       0xc1, 0x9d, 0xb0, 0x94, 0x3f, 0xed, 0x5b, 0x97, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x80, 0x09, 0xee, 0xc2, 0xa0, 0x8a, 0x27, 0x43, 0xc0, 0xc8, 0x80,
       0xc2, 0x87, 0xc3, 0x6a, 0xc2, 0x1c, 0x76, 0x07, 0x40, 0x32, 0x9e, 0x72,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xd0, 0xb3, 0x8a, 0xc2, 0xc8, 0x67, 0x89,
       0xc3, 0x2c, 0xa0, 0xec, 0x44, 0x38, 0xc5, 0x9e, 0xc3, 0x67, 0x92, 0x29,
       0x3f, 0x02, 0x74, 0xa4, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x84, 0xaf, 0x6e,
       0xc4, 0x80, 0x61, 0x8c, 0xc3, 0x82, 0xdb, 0x44, 0x45, 0x62, 0xf8, 0x06,
       0xc2, 0x03, 0xb2, 0x94, 0x3f, 0x7c, 0x9f, 0x97, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0xe0, 0xf3, 0xee, 0xc2, 0xf0, 0x4d, 0x28, 0x43, 0xc0, 0xc8, 0x80,
       0xc2, 0xbf, 0xce, 0x6d, 0xc2, 0x94, 0x23, 0x07, 0x40, 0x7d, 0xff, 0x70,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0x90, 0x88, 0x8c, 0xc2, 0x80, 0x61, 0x8c,
       0xc3, 0x84, 0xaf, 0xee, 0x44, 0x00, 0x6b, 0x9d, 0xc3, 0x24, 0xa8, 0x29,
       0x3f, 0x82, 0x0e, 0xa4, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xbc, 0xc3, 0x77,
       0xc4, 0x80, 0x78, 0x9d, 0xc3, 0x64, 0xe0, 0x44, 0x45, 0x8a, 0x3f, 0x07,
       0xc2, 0x0b, 0x0d, 0x91, 0x3f, 0xa6, 0x36, 0x83, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x20, 0x87, 0xb2, 0xc2, 0x60, 0x2a, 0x9d, 0x42, 0x40, 0xf3, 0xad,
       0xc2, 0xe8, 0x28, 0x0b, 0xc0, 0x9e, 0xc6, 0x05, 0x40, 0xcc, 0x08, 0x6a,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xeb, 0x82, 0xc2, 0x80, 0x78, 0x9d,
       0xc3, 0xbc, 0xc3, 0xf7, 0x44, 0xc2, 0x99, 0x92, 0xc3, 0xab, 0xa8, 0x29,
       0x3f, 0x14, 0xbd, 0xa3, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xa4, 0xc1, 0x78,
       0xc4, 0x50, 0xe5, 0xa1, 0xc3, 0x92, 0x02, 0x45, 0x45, 0x0c, 0x58, 0x1b,
       0xc2, 0xb4, 0x42, 0x91, 0x3f, 0x4b, 0xf3, 0x83, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x80, 0x71, 0xb3, 0xc2, 0x40, 0x4d, 0x9f, 0x42, 0xc0, 0xba, 0xac,
       0xc2, 0x18, 0xe0, 0x57, 0xc0, 0xd1, 0xa7, 0x05, 0x40, 0x16, 0x6c, 0x69,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x16, 0x71, 0xc2, 0x50, 0xe5, 0xa1,
       0xc3, 0xa4, 0xc1, 0xf8, 0x44, 0x76, 0x7d, 0x8d, 0xc3, 0x69, 0xbd, 0x29,
       0x3f, 0xcf, 0xdc, 0xa2, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x74, 0x2e, 0x7d,
       0xc4, 0xf0, 0xd5, 0xbb, 0xc3, 0xee, 0x46, 0x45, 0x45, 0x68, 0x34, 0x1a,
       0xc2, 0x76, 0x4e, 0x8e, 0x3f, 0x7b, 0xec, 0x62, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x60, 0x6a, 0xc2, 0x80, 0x00, 0xb1, 0xc1, 0x40, 0xa9, 0xe3,
       0xc2, 0x66, 0x4e, 0x0a, 0x42, 0x67, 0x18, 0x05, 0x40, 0xe8, 0x70, 0x66,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xc5, 0x4c, 0xc2, 0xf0, 0xd5, 0xbb,
       0xc3, 0x74, 0x2e, 0xfd, 0x44, 0x38, 0x1b, 0x74, 0xc3, 0x5c, 0xa9, 0x29,
       0x3f, 0xc4, 0xab, 0xa2, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x54, 0xe0, 0x7c,
       0xc4, 0xa8, 0xcf, 0xbe, 0xc3, 0x94, 0x55, 0x45, 0x45, 0xb4, 0x55, 0x2e,
       0xc2, 0x15, 0x3e, 0x8e, 0x3f, 0xba, 0x8a, 0x63, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x40, 0xfc, 0x6a, 0xc2, 0x00, 0x04, 0xa6, 0xc1, 0xc0, 0x70, 0xe2,
       0xc2, 0x76, 0x85, 0x09, 0x42, 0xe0, 0x1e, 0x05, 0x40, 0x78, 0xb4, 0x66,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x49, 0x2a, 0xc2, 0xa8, 0xcf, 0xbe,
       0xc3, 0x54, 0xe0, 0xfc, 0x44, 0x84, 0x69, 0x69, 0xc3, 0xdb, 0x5d, 0x29,
       0x3f, 0xfc, 0x17, 0xa2, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xd4, 0xa7, 0x7b,
       0xc4, 0x70, 0x96, 0xd0, 0xc3, 0x68, 0x86, 0x45, 0x45, 0x38, 0x7f, 0x3a,
       0xc2, 0x4e, 0x00, 0x8d, 0x3f, 0x50, 0x5a, 0x42, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x80, 0x9f, 0xd5, 0xc1, 0xe0, 0xf3, 0xee, 0xc2, 0xc0, 0x1b, 0x08,
       0xc3, 0x5d, 0x35, 0x59, 0x42, 0x5c, 0x37, 0x05, 0x40, 0x23, 0xb9, 0x67,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe9, 0x1f, 0xc2, 0x70, 0x96, 0xd0,
       0xc3, 0xd4, 0xa7, 0xfb, 0x44, 0xc6, 0x88, 0x4f, 0xc3, 0xbe, 0x45, 0x29,
       0x3f, 0xfe, 0x5a, 0xa2, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x44, 0x48, 0x7a,
       0xc4, 0x68, 0x4a, 0xcf, 0xc3, 0xa6, 0xcf, 0x45, 0x45, 0x70, 0xd6, 0x43,
       0xc2, 0x26, 0x0f, 0x8d, 0x3f, 0xb1, 0xa8, 0x42, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x80, 0x10, 0xd8, 0xc1, 0xc0, 0x34, 0xec, 0xc2, 0xa0, 0xcd, 0x07,
       0xc3, 0x2c, 0x2f, 0x59, 0x42, 0x46, 0x6e, 0x05, 0x40, 0xa5, 0xfa, 0x68,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xad, 0x29, 0xc2, 0x68, 0x4a, 0xcf,
       0xc3, 0x44, 0x48, 0xfa, 0x44, 0x26, 0xf5, 0x53, 0xc3, 0x7f, 0xf4, 0x28,
       0x3f, 0x4f, 0xfb, 0xa2, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x68, 0x74,
       0xc4, 0xd8, 0x08, 0xc9, 0xc3, 0x24, 0xb5, 0x46, 0x45, 0xb2, 0xde, 0x5e,
       0xc2, 0xd8, 0x0d, 0x8e, 0x3f, 0xa2, 0xdf, 0x29, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x8c, 0x39, 0x40, 0xe0, 0x54, 0x4a, 0xc3, 0x60, 0x13, 0x0c,
       0xc3, 0xf6, 0x9c, 0x82, 0x42, 0x6b, 0x59, 0x06, 0x40, 0x0a, 0x34, 0x6e,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0x20, 0xa5, 0x2d, 0xc2, 0xd8, 0x08, 0xc9,
       0xc3, 0x5c, 0x68, 0xf4, 0x44, 0x20, 0x23, 0x5d, 0xc3, 0x85, 0xe9, 0x28,
       0x3f, 0x04, 0x8d, 0xa3, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x40, 0x4f, 0x72,
       0xc4, 0xd8, 0x26, 0xc4, 0xc3, 0x0c, 0xb3, 0x47, 0x45, 0x66, 0xfb, 0x52,
       0xc2, 0x7c, 0x0e, 0x8e, 0x3f, 0x35, 0xdc, 0x29, 0x3f, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x40, 0x1c, 0x40, 0x60, 0x1c, 0x49, 0xc3, 0x60, 0x13, 0x0c,
       0xc3, 0x85, 0x3f, 0x82, 0x42, 0x5b, 0xd8, 0x06, 0x40, 0xf6, 0xc5, 0x70,
       0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x21, 0xc2, 0xd8, 0x26, 0xc4,
       0xc3, 0x40, 0x4f, 0xf2, 0x44, 0xff, 0x00, 0x64, 0xc3, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
       0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x11, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00};

#ifdef ALL_TESTS
TEST(CORTEX_STREAMING, TEST_CREATE_CLIENT_FIRST_EXCHANGE)
{
  CortexStreaming cortex("127.0.0.1");

  std::vector<unsigned char> generatedHelloPacket
      = cortex.createHelloWorldPacket();

  EXPECT_EQ(generatedHelloPacket.size(), helloWorldPacket.size());
  for (int i = 0; i < helloWorldPacket.size(); i++)
  {
    if (generatedHelloPacket[i] != helloWorldPacket[i])
    {
      std::cout << "Mismatch at index " << i << std::endl;
      std::cout << "Expected: " << (int)helloWorldPacket[i] << std::endl;
      std::cout << "Got: " << (int)generatedHelloPacket[i] << std::endl;
    }
    EXPECT_EQ(generatedHelloPacket[i], helloWorldPacket[i]);
  }

  sPacket packet;
  memcpy(&packet, hereIAmPacket.data(), hereIAmPacket.size());
  sockaddr_in address;

  cortex.parseCortexPacket(&packet, address, false);
}
#endif

#ifdef ALL_TESTS
TEST(CORTEX_STREAMING, TEST_PARSE_BODY_DESCRIPTION_RESPONSE)
{
  CortexStreaming cortex("127.0.0.1");

  // This is the packet that the client sends to the server
  std::vector<unsigned char> sendBuffer = {0x0a, 0x00, 0x00, 0x00};
  (void)sendBuffer;

  std::vector<unsigned char> generatedPacket
      = cortex.createRequestBodyDefsPacket();

  EXPECT_EQ(generatedPacket.size(), sendBuffer.size());
  for (int i = 0; i < sendBuffer.size(); i++)
  {
    if (generatedPacket[i] != sendBuffer[i])
    {
      std::cout << "Mismatch at index " << i << std::endl;
      std::cout << "Expected: " << (int)sendBuffer[i] << std::endl;
      std::cout << "Got: " << (int)generatedPacket[i] << std::endl;
    }
    EXPECT_EQ(generatedPacket[i], sendBuffer[i]);
  }

  sPacket packet;
  memcpy(&packet, bodyDescriptionPacket.data(), bodyDescriptionPacket.size());
  sockaddr_in address;

  cortex.parseCortexPacket(&packet, address, false);
}
#endif

#ifdef ALL_TESTS
TEST(CORTEX_STREAMING, TEST_GENERATE_BODY_DESCRIPTION_PACKET)
{
  CortexStreaming cortex("127.0.0.1");

  sPacket packet;
  memcpy(&packet, bodyDescriptionPacket.data(), bodyDescriptionPacket.size());
  CortexBodyDefs defs = cortex.parseBodyDefs(packet.Data.cData, packet.nBytes);

  std::vector<unsigned char> generatedPacket
      = cortex.createBodyDefsPacket(defs);

  EXPECT_LE(generatedPacket.size(), bodyDescriptionPacket.size());
  if (generatedPacket.size() > bodyDescriptionPacket.size())
  {
    std::cout << "Mismatch in size" << std::endl;
    std::cout << "Expected at most: " << bodyDescriptionPacket.size()
              << std::endl;
    std::cout << "Got: " << generatedPacket.size() << std::endl;
    return;
  }

  sPacket generatedPacketStruct;
  memcpy(
      &generatedPacketStruct, generatedPacket.data(), generatedPacket.size());
  EXPECT_LE(generatedPacketStruct.nBytes, packet.nBytes);
  if (generatedPacketStruct.nBytes > packet.nBytes)
  {
    std::cout << "Mismatch in nBytes" << std::endl;
    std::cout << "Expected: " << packet.nBytes << std::endl;
    std::cout << "Got: " << generatedPacketStruct.nBytes << std::endl;
    return;
  }
  EXPECT_EQ(generatedPacketStruct.iCommand, packet.iCommand);
  if (generatedPacketStruct.iCommand != packet.iCommand)
  {
    std::cout << "Mismatch in iCommand" << std::endl;
    std::cout << "Expected: " << packet.iCommand << std::endl;
    std::cout << "Got: " << generatedPacketStruct.iCommand << std::endl;
    return;
  }

  for (int i = 4; i < generatedPacket.size(); i++)
  {
    EXPECT_EQ(generatedPacket[i], bodyDescriptionPacket[i]);
    if (generatedPacket[i] != bodyDescriptionPacket[i])
    {
      std::cout << "Mismatch at index " << i << std::endl;
      std::cout << "Expected: " << (int)bodyDescriptionPacket[i] << std::endl;
      std::cout << "Got: " << (int)generatedPacket[i] << std::endl;
      return;
    }
  }
}
#endif

#ifdef ALL_TESTS
TEST(CORTEX_STREAMING, TEST_PARSE_FRAME_EXAMPLE)
{
  CortexStreaming cortex("127.0.0.1");

  // This is the packet that the client sends to the server
  std::vector<unsigned char> sendBuffer = {0x0c, 0x00, 0x00, 0x00};
  (void)sendBuffer;

  std::vector<unsigned char> generatedPacket
      = cortex.createRequestFramePacket();

  EXPECT_EQ(generatedPacket.size(), sendBuffer.size());
  for (int i = 0; i < sendBuffer.size(); i++)
  {
    if (generatedPacket[i] != sendBuffer[i])
    {
      std::cout << "Mismatch at index " << i << std::endl;
      std::cout << "Expected: " << (int)sendBuffer[i] << std::endl;
      std::cout << "Got: " << (int)generatedPacket[i] << std::endl;
    }
    EXPECT_EQ(generatedPacket[i], sendBuffer[i]);
  }

  sPacket packet;
  memcpy(&packet, frame1Packet.data(), frame1Packet.size());
  sockaddr_in address;

  cortex.parseCortexPacket(&packet, address, false);
}
#endif

#ifdef ALL_TESTS
TEST(CORTEX_STREAMING, TEST_GENERATE_FRAME_PACKET)
{
  CortexStreaming cortex("127.0.0.1");

  sPacket packet;
  memcpy(&packet, frame1Packet.data(), frame1Packet.size());
  CortexFrameOfData frame
      = cortex.parseFrameOfData(packet.Data.cData, packet.nBytes);

  std::vector<unsigned char> generatedPacket
      = cortex.createFrameOfDataPacket(frame);

  EXPECT_LE(generatedPacket.size(), frame1Packet.size());
  if (generatedPacket.size() > frame1Packet.size())
  {
    std::cout << "Mismatch in size" << std::endl;
    std::cout << "Expected at most: " << frame1Packet.size() << std::endl;
    std::cout << "Got: " << generatedPacket.size() << std::endl;
    return;
  }

  sPacket generatedPacketStruct;
  memcpy(
      &generatedPacketStruct, generatedPacket.data(), generatedPacket.size());
  EXPECT_LE(generatedPacketStruct.nBytes, packet.nBytes);
  if (generatedPacketStruct.nBytes > packet.nBytes)
  {
    std::cout << "Mismatch in nBytes" << std::endl;
    std::cout << "Expected: " << packet.nBytes << std::endl;
    std::cout << "Got: " << generatedPacketStruct.nBytes << std::endl;
    return;
  }
  EXPECT_EQ(generatedPacketStruct.iCommand, packet.iCommand);
  if (generatedPacketStruct.iCommand != packet.iCommand)
  {
    std::cout << "Mismatch in iCommand" << std::endl;
    std::cout << "Expected: " << packet.iCommand << std::endl;
    std::cout << "Got: " << generatedPacketStruct.iCommand << std::endl;
    return;
  }

  for (int i = 4; i < generatedPacket.size(); i++)
  {
    EXPECT_EQ(generatedPacket[i], frame1Packet[i]);
    if (generatedPacket[i] != frame1Packet[i])
    {
      std::cout << "Mismatch at index " << i << std::endl;
      std::cout << "Expected: " << (int)frame1Packet[i] << std::endl;
      std::cout << "Got: " << (int)generatedPacket[i] << std::endl;
      return;
    }
  }
}
#endif

#ifdef ALL_TESTS
TEST(CORTEX_STREAMING, TEST_FRAME_UDP_PACKET)
{
  CortexStreaming cortex("127.0.0.1");
  (void)cortex;
  // char* data = buffer.data();
  sPacket packet;
  memcpy(&packet, frame2Packet.data(), frame2Packet.size());
  sockaddr_in address;

  cortex.parseCortexPacket(&packet, address, false);
}
#endif

#ifdef ALL_TESTS
TEST(CORTEX_STREAMING, TEST_GENERATE_AND_RECOVER_PACKETS)
{
  CortexStreaming cortexServer("127.0.0.1");

  std::vector<std::string> markerNames;
  std::vector<Eigen::Vector3s> markerPoses;
  std::vector<Eigen::MatrixXs> forcePlateCopTorqueForce;

  for (int i = 0; i < 10; i++)
  {
    markerNames.push_back("marker" + std::to_string(i));
    markerPoses.push_back(Eigen::Vector3s::Random());
  }

  for (int i = 0; i < 2; i++)
  {
    forcePlateCopTorqueForce.push_back(Eigen::MatrixXs::Random(4, 9));
    forcePlateCopTorqueForce[i].col(3).setZero();
    forcePlateCopTorqueForce[i].col(4).setZero();
  }
  cortexServer.mockServerSetData(
      markerNames, markerPoses, forcePlateCopTorqueForce);

  std::vector<unsigned char> generatedBodyDefsPacket
      = cortexServer.createBodyDefsPacket(cortexServer.getCurrentBodyDefs());
  std::vector<unsigned char> generatedFramePacket
      = cortexServer.createFrameOfDataPacket(
          cortexServer.getCurrentFrameOfData());

  CortexStreaming cortexReceiver("127.0.0.1");
  std::vector<std::string> recoveredMarkerNames;
  std::vector<Eigen::Vector3s> recoveredMarkers;
  std::vector<Eigen::MatrixXs> recoveredForcePlateCopTorqueForce;
  cortexReceiver.setFrameHandler(
      [&](std::vector<std::string> markerNames,
          std::vector<Eigen::Vector3s> markerPoses,
          std::vector<Eigen::MatrixXs> forcePlateCopTorqueForce) {
        recoveredMarkerNames = markerNames;
        recoveredMarkers = markerPoses;
        recoveredForcePlateCopTorqueForce = forcePlateCopTorqueForce;
      });

  sockaddr_in address;
  sPacket packet;
  memcpy(
      &packet, generatedBodyDefsPacket.data(), generatedBodyDefsPacket.size());
  cortexReceiver.parseCortexPacket(&packet, address, false);

  memcpy(&packet, generatedFramePacket.data(), generatedFramePacket.size());
  cortexReceiver.parseCortexPacket(&packet, address, false);

  EXPECT_EQ(recoveredMarkerNames.size(), 10);
  EXPECT_EQ(recoveredMarkers.size(), 10);
  EXPECT_EQ(recoveredForcePlateCopTorqueForce.size(), 2);
  for (int i = 0; i < 10; i++)
  {
    EXPECT_EQ(recoveredMarkerNames[i], markerNames[i]);
    EXPECT_TRUE(recoveredMarkers[i].isApprox(markerPoses[i], 1e-6));
    if (!recoveredMarkers[i].isApprox(markerPoses[i], 1e-6))
    {
      Eigen::Matrix3s compare;
      compare.col(0) = recoveredMarkers[i];
      compare.col(1) = markerPoses[i];
      compare.col(2) = recoveredMarkers[i] - markerPoses[i];
      std::cout << "Marker " << i
                << " mismatch, recovered - expected - diff: " << std::endl
                << compare << std::endl;
    }
  }
  for (int i = 0; i < 2; i++)
  {
    EXPECT_EQ(
        recoveredForcePlateCopTorqueForce[i].rows(),
        forcePlateCopTorqueForce[i].rows());
    EXPECT_EQ(
        recoveredForcePlateCopTorqueForce[i].cols(),
        forcePlateCopTorqueForce[i].cols());
    EXPECT_TRUE(recoveredForcePlateCopTorqueForce[i].isApprox(
        forcePlateCopTorqueForce[i], 1e-6));
    if (recoveredForcePlateCopTorqueForce[i].rows()
            == forcePlateCopTorqueForce[i].rows()
        && recoveredForcePlateCopTorqueForce[i].cols()
               == forcePlateCopTorqueForce[i].cols()
        && !recoveredForcePlateCopTorqueForce[i].isApprox(
            forcePlateCopTorqueForce[i], 1e-6))
    {
      Eigen::MatrixXs compare = Eigen::MatrixXs::Zero(9, 3);
      compare.col(0) = recoveredForcePlateCopTorqueForce[i].row(0);
      compare.col(1) = forcePlateCopTorqueForce[i].row(0);
      compare.col(2) = recoveredForcePlateCopTorqueForce[i].row(0)
                       - forcePlateCopTorqueForce[i].row(0);
      std::cout << "Force plate " << i
                << " mismatch, recovered - expected - diff: " << std::endl
                << compare << std::endl;
    }
  }
}
#endif